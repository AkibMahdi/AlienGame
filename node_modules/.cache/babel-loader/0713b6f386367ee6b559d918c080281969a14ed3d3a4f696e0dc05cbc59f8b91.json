{"ast":null,"code":"export const pathFromBezierCurve = cubicBezierCurve => {\n  const {\n    initialAxis,\n    initialControlPoint,\n    endingControlPoint,\n    endingAxis\n  } = cubicBezierCurve;\n  return `\n      M${initialAxis.x} ${initialAxis.y}\n      c ${initialControlPoint.x} ${initialControlPoint.y}\n      ${endingControlPoint.x} ${endingControlPoint.y}\n      ${endingAxis.x} ${endingAxis.y}\n    `;\n};\nexport const radiansToDegrees = radians => radians * 180 / Math.PI;\n\n// https://math.stackexchange.com/questions/714378/find-the-angle-that-creating-with-y-axis-in-degrees\nexport const calculateAngle = (x1, y1, x2, y2) => {\n  if (x2 >= 0 && y2 >= 0) {\n    return 90;\n  } else if (x2 < 0 && y2 >= 0) {\n    return -90;\n  }\n  const dividend = x2 - x1;\n  const divisor = y2 - y1;\n  const quotient = dividend / divisor;\n  return radiansToDegrees(Math.atan(quotient)) * -1;\n};","map":{"version":3,"names":["pathFromBezierCurve","cubicBezierCurve","initialAxis","initialControlPoint","endingControlPoint","endingAxis","x","y","radiansToDegrees","radians","Math","PI","calculateAngle","x1","y1","x2","y2","dividend","divisor","quotient","atan"],"sources":["/Users/akibmahdi/aliens-go-home/src/utils/formulas.js"],"sourcesContent":["export const pathFromBezierCurve = (cubicBezierCurve) => {\n    const {\n      initialAxis, initialControlPoint, endingControlPoint, endingAxis,\n    } = cubicBezierCurve;\n    return `\n      M${initialAxis.x} ${initialAxis.y}\n      c ${initialControlPoint.x} ${initialControlPoint.y}\n      ${endingControlPoint.x} ${endingControlPoint.y}\n      ${endingAxis.x} ${endingAxis.y}\n    `;\n  };\n\n  export const radiansToDegrees = radians => ((radians * 180) / Math.PI);\n\n// https://math.stackexchange.com/questions/714378/find-the-angle-that-creating-with-y-axis-in-degrees\nexport const calculateAngle = (x1, y1, x2, y2) => {\n  if (x2 >= 0 && y2 >= 0) {\n    return 90;\n  } else if (x2 < 0 && y2 >= 0) {\n    return -90;\n  }\n\n  const dividend = x2 - x1;\n  const divisor = y2 - y1;\n  const quotient = dividend / divisor;\n  return radiansToDegrees(Math.atan(quotient)) * -1;\n};"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAIC,gBAAgB,IAAK;EACrD,MAAM;IACJC,WAAW;IAAEC,mBAAmB;IAAEC,kBAAkB;IAAEC;EACxD,CAAC,GAAGJ,gBAAgB;EACpB,OAAQ;AACZ,SAASC,WAAW,CAACI,CAAE,IAAGJ,WAAW,CAACK,CAAE;AACxC,UAAUJ,mBAAmB,CAACG,CAAE,IAAGH,mBAAmB,CAACI,CAAE;AACzD,QAAQH,kBAAkB,CAACE,CAAE,IAAGF,kBAAkB,CAACG,CAAE;AACrD,QAAQF,UAAU,CAACC,CAAE,IAAGD,UAAU,CAACE,CAAE;AACrC,KAAK;AACH,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGC,OAAO,IAAMA,OAAO,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAG;;AAExE;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,KAAK;EAChD,IAAID,EAAE,IAAI,CAAC,IAAIC,EAAE,IAAI,CAAC,EAAE;IACtB,OAAO,EAAE;EACX,CAAC,MAAM,IAAID,EAAE,GAAG,CAAC,IAAIC,EAAE,IAAI,CAAC,EAAE;IAC5B,OAAO,CAAC,EAAE;EACZ;EAEA,MAAMC,QAAQ,GAAGF,EAAE,GAAGF,EAAE;EACxB,MAAMK,OAAO,GAAGF,EAAE,GAAGF,EAAE;EACvB,MAAMK,QAAQ,GAAGF,QAAQ,GAAGC,OAAO;EACnC,OAAOV,gBAAgB,CAACE,IAAI,CAACU,IAAI,CAACD,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;AACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}